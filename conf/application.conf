# This is the main configuration file for the application.
# ~~~~~

# 14 means 2 ^^ 14 regions, ie 16 million
reactiveMaps.maxZoomDepth=14

reactiveMaps.maxSubscriptionRegions=6

reactiveMaps.clusterThreshold=16
reactiveMaps.clusterDimension=4

reactiveMaps.summaryInterval=5s
reactiveMaps.expiryInterval=30s
reactiveMaps.subscriberBatchInterval=2s

reactiveMaps.bots.enabled=true
reactiveMaps.bots.totalNumberOfBots=75

# The actors module
play.modules.enabled += "actors.Actors"

# ConductR configuration - automatically registers startup
play.application.loader = "com.typesafe.conductr.bundlelib.play.ConductRApplicationLoader"
play.modules.enabled += "com.typesafe.conductr.bundlelib.play.ConductRLifecycleModule"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="]I;nuZEPTPGytF5U/970v=FAxlxl5SHqfos=]C??:lG>:d;i13LFWp8rc5a`]j2c"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Akka configuration
akka {

  loglevel = INFO
  
  actor.provider = "akka.cluster.ClusterActorRefProvider"
  
  extensions = [
    "akka.cluster.pubsub.DistributedPubSub"
  ]

  remote.netty.tcp {
    hostname = "127.0.0.1"
    port = 2552
  }
  
  cluster {
    seed-nodes = ["akka.tcp://application@127.0.0.1:2552"]
    roles = ["frontend", "backend-region", "backend-summary"]
    split-brain-resolver.active-strategy = keep-majority
  }
  
  actor.deployment {
    # Routing of position updates to the regionManager on the right
    # backend node. The node is selected by consistent hashing of
    # the region id, i.e. user position updates in a region is routed
    # to the backend node responsible for that region.
    /regionManagerClient/router {
      router = consistent-hashing-pool
      nr-of-instances = 1000
      routees.paths = ["/user/regionManager"]
      cluster {
        enabled = on
        allow-local-routees = on
        use-role = "backend-region"
      }
    }
    # Routing of sub-region summary information to enclosing region,
    # which may be located on another backend node. The node is selected 
    # by consistent hashing of the region id.
    /regionManager/router {
      router = consistent-hashing-pool
      nr-of-instances = 1000
      routees.paths = ["/user/regionManager"]
      cluster {
        enabled = on
        allow-local-routees = on
        use-role = "backend-summary"
      }
    }
  }
}

cinnamon.chmetrics {
  reporters += "cinnamon.chmetrics.statsd-reporter"

  actors {
    "/user/*" {
      report-by = class
    }
  }
}
